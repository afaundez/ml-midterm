#!/usr/bin/env ruby
# frozen_string_literal: true

require 'set'
require_relative '../lib/parser'
require_relative '../lib/dimension'
require_relative '../lib/space'
require_relative '../lib/classifier'

options = Parser.parse ARGV

srand options.seed if options.seed

dimensions = (0...options[:measurements_cardinality]).collect do
  (0...options[:measurement_min_cardinality]).to_a
end

klass = Dimension.new options[:class_cardinality]
space = Space.new dimensions

classifier = Classifier.new

k_folds = options[:k_folds] # klass.size
sample_size =  10 * (klass.size * space.size)

k_fold_size = sample_size / k_folds
# puts "Generating #{space.size} classifications"
# true_classes = space.addresses.collect { |address| klass.random }

iterations = options[:iterations]

puts "Starting iterations #{iterations}"
(0...iterations).each do |iteration|
  puts "\tCreating training and test samples (~#{sample_size / 2} rows each)"
  data,
  test_data,
  target,
  test_target = (sample_size / 2).times.reduce([[], [], [], []]) do |output|
    output[0] << space.random
    output[1] << space.random
    output[2] << klass.random
    output[3] << klass.random
    output
  end

  classifier.fit data: data, target: target, space: space, klass: klass
  puts "\tAFTER FIT TRAINING expected_gain: #{classifier.expected_gain}"

  predict = test_data.zip(test_target).collect do |measurement, true_class|
    classifier.predict measurement
  end
  prediction_matches = predict.zip(test_target).count { |a,b| a == b }
  prediction_accuracy = prediction_matches / test_target.size.to_f
  puts "\tAFTER PREDICT TEST prediction_accuracy: #{prediction_accuracy}"

  predict = data.zip(target).collect do |measurement, true_class|
    classifier.predict measurement
  end

  adapt = classifier.adapt data, target, predict

  predict = test_data.zip(test_target).collect do |measurement, true_class|
    classifier.predict measurement
  end

  prediction_matches = predict.zip(test_target).count { |a,b| a == b }
  prediction_accuracy = prediction_matches / test_target.size.to_f
  puts "\tAFTER ADAPT TEST prediction_accuracy: #{prediction_accuracy}"
  puts "\tAFTER ADAPT TEST expected_gain: #{classifier.expected_gain}"
end
classifier.summary
